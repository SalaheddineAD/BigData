package myPackage;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Main {
	private static int number_reducers=3;
	private static int number_mappers=7;	
	
	public static Mapper mapper(String input) {
		Stream<String> stream = Arrays.stream(input.split("[ ,.-?!]"));
		stream = stream.map(String::toLowerCase);
		Mapper mapper =new Mapper<Pair>();
		stream.map(Pair::new).forEach(e->{
			if(!e.getKey().matches(".*[0-9_.\\s].*|^$"))
				mapper.add(e);
			});
		return mapper;
	}
	
	public static List<GroupByPair<String,Integer>> shuffleSort(Mapper<Pair> mapper) {
//		transforing the mapper into a stream of pairs
		Stream<Pair> stream = mapper.getList().stream();
//		sorting the stream of pairs
		stream=stream.sorted((e1,e2)->e1.getKey().compareTo(e2.getKey()));
//		creating a list of grouBypPair
		List<GroupByPair<String,Integer>> result=new ArrayList<GroupByPair<String,Integer>>();
//		Stream<GroupByPair<String,Integer>> result_stream=result.stream();
//		concatenating
		stream.forEach(e->{
//			result_stream=result.stream()
//					.filter(e2->e2.getKey().equals(e))
//					.forEach(e2->e2.add(e.getValue()));	
			boolean found=false;
			for(GroupByPair<String,Integer> tmp : result) {
				if( tmp.getKey().equals(e.getKey())) {
					tmp.add(e.getValue());
					found=true;
					break;
				}
			}
			if(found==false) {
				result.add(new GroupByPair<String,Integer>(e.getKey(),new ArrayList<Integer>(Arrays.asList(e.getValue()))));
			}
		});
		return result;
	}
	public static List<GroupByPair<String,Integer>> shuffleSort(List<Pair> list_pairs) {
//		transforing the list_pairs into a stream of pairs
		Stream<Pair> stream = list_pairs.stream();
//		sorting the stream of pairs
		stream=stream.sorted((e1,e2)->e1.getKey().compareTo(e2.getKey()));
//		creating a list of grouBypPair
		List<GroupByPair<String,Integer>> result=new ArrayList<GroupByPair<String,Integer>>();
//		Stream<GroupByPair<String,Integer>> result_stream=result.stream();
//		concatenating
		stream.forEach(e->{
//			result_stream=result.stream()
//					.filter(e2->e2.getKey().equals(e))
//					.forEach(e2->e2.add(e.getValue()));	
			boolean found=false;
			for(GroupByPair<String,Integer> tmp : result) {
				if( tmp.getKey().equals(e.getKey())) {
					tmp.add(e.getValue());
					found=true;
					break;
				}
			}
			if(found==false) {
				result.add(new GroupByPair<String,Integer>(e.getKey(),new ArrayList<Integer>(Arrays.asList(e.getValue()))));
			}
		});
		return result;
	}
	
	public static List<Pair> reducer(List<GroupByPair<String,Integer>> groupByPair){
		List<Pair> result=new ArrayList<Pair>();
		groupByPair.forEach(e->{
			result.add(new Pair(e.getKey(),e.getListValue().stream().reduce(0,(a,b)->a+b)));
		});
		return result;
	}
	
	public static int getPartition(String key){
		return (int) Math.abs(key.hashCode() % number_reducers);
	}

	
	public static void main(String[] args) {
		
		
//		For each line of the file we will use a different mapper.
//		Then the outputs of each mapper will be stored in a list called list_output_mapper
//		Then for each element of key of the list we will store it in a list of input reducer
		List<Mapper<Pair>> list_output_mapper=new ArrayList<Mapper<Pair>>();
		Map<Integer,List<Pair>> list_input_reducer=new HashMap<Integer,List<Pair>>(number_reducers);
		for(int i=0;i<number_reducers;i++) {
			list_input_reducer.put(i, new ArrayList<Pair>());
		}

		try (Stream<String> stream = Files.lines(Paths.get(String.valueOf(
				new File("D:\\CAREER\\MIU\\Big Data\\assignments\\W1D1\\testDataForW1D1.txt"))))) {
			
			System.out.println(shuffleSort(mapper(stream.reduce("",(a,b)->a+b))).toString());
//			System.out.println(reducer(shuffleSort(mapper(stream.reduce("",(a,b)->a+b)))).toString());
			
//			stream.forEach(e->{
//				list_output_mapper.add(mapper(e));
//			});
//			
//			list_output_mapper.stream().forEach(mapper->{
//				mapper.getList().stream()
//					.forEach(pair->{
//						list_input_reducer.get(getPartition(pair.getKey())).add(pair);
//					});
//				});
//			for (List<Pair> list :list_input_reducer.values()) {
//				System.out.println(reducer(shuffleSort(list)).toString());
//			}
			
			

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
